name: Main Kittygramme workflow

on:
  push:
    branches:
      - main

jobs:
  backend_tests:
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:14.11
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Check out repo code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.10.12
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8==7.0.0
        pip install -r ./backend/requirements.txt
    - name: Test with flake8, pytest and DB usage
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: django_password
        POSTGRES_DB: django_db
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        python -m flake8 backend/
        pytest

  build_and_push_backend_to_docker_hub:
    name: Build & push KG backend Docker img to DockerHub
    runs-on: ubuntu-22.04
    needs: backend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest

  frontend_tests:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Set up nodeJS
      uses: actions/setup-node@v4
      with:
        node-version: 18
    - name: Install dependencies
      run: |
        cd frontend/
        npm ci
    - name: Test frontend
      run: |
        cd frontend/
        npm run test

  build_and_push_frontend_to_docker_hub:
    name: Build & push KG frontend Docker image to DockerHub
    runs-on: ubuntu-22.04
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest

  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-22.04
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: ./nginx/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest
  deploy:
    runs-on: ubuntu-22.04
    needs:
      - build_and_push_backend_to_docker_hub
      - build_and_push_frontend_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: Copy docker-compose.production.yml via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.production.yml"
        target: "kittygram"

    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd kittygram
          docker compose -f docker-compose.production.yml pull

#          docker compose -f docker-compose.production.yml --progress=quiet pull
#          docker compose -f docker-compose.production.yml --progress=quiet down -v
#          docker compose -f docker-compose.production.yml --progress=quiet up -d
#          docker compose -f docker-compose.production.yml exec backend python manage.py migrate
#          docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
#          docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/
#
#  send_post_deploy_telegram:
#    runs-on: ubuntu-22.04
#    needs: deploy
#    steps:
#    - name: Send the OK Telegram message
#      uses: appleboy/telegram-action@master
#      with:
#        to: ${{ secrets.TELEGRAM_TO }}
#        token: ${{ secrets.TELEGRAM_TOKEN }}
#        message: Kittygram been redeployed to WebSpace via the newer repo.
#
